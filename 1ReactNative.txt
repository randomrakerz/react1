import { View, Text, Stylesheet, FlatList, Button, TouchableOpacity, Image } from 'react-native'

>> FlatList	
	- key has to be a string and NOT a number 

>> expo is a react-native framework.
codeSandbox seems to have online code 

>> console.log will appear in the terminal running the "react native packager"

>> props.navigation.navigate('SomeComp'); // programmatically change route on button click. 
	props is automatically provided by "Stack Navigator" for us

>> <Image /> is a self closing tag
	+ imageSource = "require('../../assets/a.jpg')", where imageSource is a property which can be passed from parent to child. \\\
	
	
==================


React Native in 100 seconds 
https://www.youtube.com/watch?v=gvkqT_Uoahw

	- it uses native-components of ios and android, instead of html ?
	- learn once, write anywhere 

Some React Native Core comps:-
	Button, Switch, ScrollView, View, Text  
	
View in detail

	View ==> Bridge ==> 1) Android.View 
						2) UIVIEW
						3) div 
						
import { Platform, View } from 'react-native';						

const App = () => {

	return (
	
		<View style={{flex:1}}>
			{Platform.OS === 'ios' && 
				(
					<View style={{
						flex:1,
						backgroundColor:'lightblue'
					}} />
				)
			}
	)
}

export default App 

---

Note: there is no css in react native. Instead, every "core comp" takes a style prop 


import { Stylesheet, View, Text, TextInput, Image } from 'react-native';

const App = () => {
	return <View style={styles.customStyleProp} />
};

const styles = Stylesheet.create({
	customStyleProp: {
		flex:1, 
		justifyContent: 'center',
		alignItems: 'center',
		backgroundColor: 'red'
	},
})

---

Native-core-components cheatsheet 
https://www.codecademy.com/learn/learn-react-native/modules/core-components-react-native/cheatsheet
https://dev.to/codemaker2015/react-native-cheatsheet-for-beginners-28oa 	!!!IMP!!!

Stylesheet, View, Text, TextInput, Image
TouchableHighlight / TouchableOpacity
FlatList, Stylesheet, Inline Styling 
Flexbox
Detecting Screen Size
Navigation
useNavigation Hook
BackHandler android
Networking
Creating a sample app
React Native Cheatsheet Let’s have a look at some of the key points of react native. 

---
Create 
npx react-native init AppName
//or
npx create-react-native-app AppName

Running the app 
cd AppName
npx react-native run-android
//or
npx react-native run-android

upgrade 
npm install react-native@latest;


The <View> component act as a container and can be translated as <div> from web.
Similar to View, <ScrollView> is a generic container with scrolling support to provide responsive layout for different devices.

<Image> comp ex. 
function App() {
  return (
    <>
      <Image source={require('./assets/logo.jpg')} />
      <Image source={{ uri: 'https://github.com/codemaker2015/codemaker2015/raw/main/codemaker.png' }} />
      <Image source={{ uri: 'data:image/png;base64,<base64-string>=' }} />
    </>
  );
}

<Text> comp ex. 
function App() {
  return (
    <Text style={{ height: 20, margin: 10 }}>
      Hello World
    </Text>
  );
}

<Button> comp ex. 
function App() {
  return (
    <Button
      onPress={onPressSubmit}
      title="Submit"
      color="#FFFFFF"
    />
  );
}

---

The <TouchableHighlight> / <TouchableOpacity> component is a wrapper for making views respond in accordance to touches. 
On press down, the opacity of the wrapped view is decreased, 
	which allows the underlay color to show through. 
	NOTE:- It must have at least one child component.

import React, {useState} from 'react';
import {Text, TouchableHighlight, TouchableOpacity, View} from 'react-native';

const App = () => {
  const [count, setCount] = useState(0);
  const onIncrement = () => setCount(count + 1);
  const onDecrement = () => setCount(count - 1);

  return (
    <View
      style={{
        flex: 1,
        margin: 20,
        alignItems: 'center',
        justifyContent: 'center',
      }}>
      <Text>Count: {count}</Text>
      <TouchableOpacity
        onPress={onIncrement}
        style={{backgroundColor: '#F3F3F3', margin: 20, padding: 20}}>
        <Text>+</Text>
      </TouchableOpacity>
      <TouchableHighlight
        onPress={onDecrement}
        style={{backgroundColor: '#F3F3F3', margin: 20, padding: 20}}>
        <Text>-</Text>
      </TouchableHighlight>
    </View>
  );
};

export default App;

---
The <TextInput> component allows user to enter text into the app. It has an onChangeText event which is called every time the text changes.
ex. 

import React, {useState} from 'react';
import {Text, TextInput, View} from 'react-native';

const App = () => {
  const [text, setText] = useState('');
  return (
    <View style={{padding: 15}}>
      <TextInput
        style={{height: 50}}
        placeholder="Enter name"
        onChangeText={name => setText(name)}
        defaultValue={text}
      />
      <Text style={{padding: 10, fontSize: 30}}>{text}</Text>
    </View>
  );
};

export default App;

---
The <FlatList> component displays a scrolling list of items. It renders only those elements that are currently shown on the screen.

The FlatList component requires two props: data and renderItem. 
	data is the source of the list and 
	renderItem returns a formatted component to render.

import React from 'react';
import {FlatList, Text, View} from 'react-native';

const App = () => {
  return (
    <View>
      <FlatList
        data={[
          {key: 'January'},
          {key: 'February'},
          {key: 'March'},
          {key: 'April'},
        ]}
        renderItem={({item}) => <Text>{item.key}</Text>}
      />
    </View>
  );
};

---

The <StyleSheet> is an abstraction that replaces CSS by accepting CSS styling rules using a two-dimensional JavaScript object.
function App() {
return (
    <>
      <Text style={styles.heading}>React Native</Text>
      <Text style={styles.message}>Hello World</Text>
    </>
  );
}

const styles = StyleSheet.create({
  heading: {
    fontSize: 16,
  },
  message: {
    fontSize: 11,
    textTransform: 'uppercase',
  },
});

---
Inline Styling:-

function App() {
    const [color, setColor] = useState("red");
    return (
       <View>
         <Text style={{"border":`1px solid ${color}`}}>Color: {color}</Text>
       </View>
    );
}

---
The <Flexbox> component is used to layout the component’s children.

import { View, Text, StyleSheet } from "react-native";

const App = () => {
  return (
    <View style={[styles.container, {
      // Try setting `flexDirection` to `"column"`.
      flexDirection: "column"
    }]}>
      <View style={{ flex: 1, backgroundColor: "red" }} />
      <View style={{ flex: 2, backgroundColor: "orange" }} />
      <View style={{ flex: 3, backgroundColor: "green" }} />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 10,
  }
});

export default App;

---

Detecting Screen Size 
import { Dimensions } from 'react-native';

const { width, height } = Dimensions.get('window');

alert(Screen size: ${width}x${height});

---
Navigation 

npm install @react-navigation/native-stack

In the react-navigation library, all navigator methods follow a naming pattern 
like create<type>Navigator(), which returns an object with Navigator and Screen properties.

"createNativeStackNavigator" is a function that returns an object containing 2 properties: 
	Screen and Navigator.

"NavigationContainer" is a component which manages the navigation tree and contains the navigation state.

ex.1.
	import { View, Text } from 'react-native';
	import { NavigationContainer } from '@react-navigation/native';
	import { createNativeStackNavigator } from '@react-navigation/native-stack';

	function HomeScreen() {
	  return (
		<View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
		  <Text>Home Screen</Text>
		</View>
	  );
	}

	const Stack = createNativeStackNavigator();

	function App() {
	  return (
		<NavigationContainer>
		  <Stack.Navigator>
			<Stack.Screen name="Home" component={HomeScreen} />
		  </Stack.Navigator>
		</NavigationContainer>
	  );
	}

	export default App;
	
	
ex.2. 
The useNavigation hook provides access to the navigation API and can be used to implement transition from one screen to another.

import * as React from 'react';
import { Button } from 'react-native';
import { useNavigation } from '@react-navigation/native';

function App() {
  const navigation = useNavigation();

  return (
    <Button
      title="Back"
      onPress={() => {
        navigation.goBack();
      }}
    />
  );
}
export default App;

---
BackHandler API android
In order to handle the back button actions from the code, the BackHandler API helps to detect hardware button presses for back navigation, and registers event listeners for the system’s back action.

import {useEffect} from 'react';
import {BackHandler} from 'react-native';

function App() {
  useEffect(() => {
    const backAction = () => {
      console.log("back button pressed");
      return false; // back button is enabled
      return true;  // back button is disabled
    };

    // Register for hardware back event and attach a handler to it
    const backHandler = BackHandler.addEventListener(
      'hardwareBackPress',
      backAction,
    );

    return () => backHandler.remove();
  }, []);
};

export default App;

---

Most of the mobile apps require to load resources from a remote URL. 
React Native provides the Fetch API for fetching data from remote sources

import React, { useEffect, useState } from 'react';
import { ActivityIndicator, FlatList, Text, View } from 'react-native';

function App() {
  const [isLoading, setLoading] = useState(true);
  const [data, setData] = useState([]);

  const getMovies = async () => {
     try {
      const response = await fetch('https://reactnative.dev/movies.json');
      const json = await response.json();
      setData(json.movies);
    } catch (error) {
      console.error(error);
    } finally {
      setLoading(false);
    }
  }

  useEffect(() => {
    getMovies();
  }, []);

  return (
    <View style={{ flex: 1, padding: 20 }}>
      {isLoading ? <ActivityIndicator/> : (
        <FlatList
          data={data}
          keyExtractor={({ id }, index) => id}
          renderItem={({ item }) => (
            <Text>{item.title}, {item.releaseYear}</Text>
          )}
        />
      )}
    </View>
  );
}
export default App;

---
Create a sample app :-

npx react-native init MyProfileApp
Open App.js file and add the following code to it.

import React, {useState, useEffect} from 'react';
import {
  Button,
  Image,
  StyleSheet,
  Text,
  View,
  ScrollView,
  Linking,
  Dimensions,
  ActivityIndicator,
} from 'react-native';

const {width, height} = Dimensions.get('window');

function Link(props) {
  return (
    <Text
      {...props}
      accessibilityRole="link"
      style={StyleSheet.compose(styles.link, props.style)}
    />
  );
}

function App() {
  const [logoUri, setLogoUri] = useState(
    'https://avatars.githubusercontent.com/',
  );
  const [loading, setLoading] = useState(false);

  const getLogoUri = async () => {
    try {
      setLoading(true);
      const response = await fetch(
        'https://api.github.com/users/codemaker2015',
      );
      const json = await response.json();
      setLogoUri(json?.avatar_url);
      setLoading(false);
    } catch (error) {
      console.error(error);
      setLoading(false);
    }
  };

  useEffect(() => {
    console.log('component is mounted');
    getLogoUri();
    return () => {
      console.log('component is unmounted');
    };
  }, []);

  return (
    <ScrollView contentContainerStyle={styles.app}>
      <View style={styles.header}>
        {loading ? (
          <ActivityIndicator />
        ) : (
          <Image
            accessibilityLabel="React logo"
            source={{uri: logoUri}}
            resizeMode="contain"
            style={styles.logo}
          />
        )}
        <Text style={styles.title}>Vishnu Sivan</Text>
      </View>
      <Text style={styles.subTitle}>Immersive tech lead, TCS RapidLabs</Text>
      <Text style={styles.text}>
        Seasoned professional, forward looking software engineer with 3+ years
        of experience in creating and executing innovative solutions in
        immersive field to enhance business productivity.
        {'\n\n'}
        <Link
          href="https://github.com/necolas/react-native-web"
          onPress={() => {
            Linking.openURL('https://github.com/codemaker2015');
          }}>
          Know more about me
        </Link>
      </Text>
      <Button
        onPress={() => {
          Linking.openURL('mailto:codemaker2015@gmail.com');
        }}
        title="Contact Me"
      />
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  app: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F3F3F3',
    width: width,
    height: height,
  },
  logo: {
    width: 180,
    height: 180,
    borderRadius: 10,
  },
  header: {
    flexDirection: 'column',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 10,
  },
  title: {
    fontWeight: 'bold',
    fontSize: 30,
    marginVertical: 10,
    textAlign: 'center',
  },
  subTitle: {
    fontWeight: 'bold',
    fontSize: 20,
    marginVertical: 10,
    textAlign: 'center',
  },
  text: {
    lineHeight: 20,
    fontSize: 18,
    margin: 18,
    textAlign: 'center',
  },
  link: {
    color: '#1B95E0',
  },
});
export default App;

Run the app :-
npx react-native run-android

---

https://res.cloudinary.com/practicaldev/image/fetch/s--bxAHyt2Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7edgr9abtwr4z8i20vjk.png

has more cheatsheets in an image 

=================

frameworks like expo build on native-core-components 
https://www.youtube.com/watch?v=vFW_TxKLyrE
Expo in 100 seconds 

npx create-expo-app 
npm run android 
	and emulator will popup and u can do code changes, hot reload is supported.
	
Note:- U can also test ur app in a sandbox with tools like Expo go .

expo uses-file-based routing. 

Note: on desktop, u can navigate using the <Link > core-comp ; 
	but on mobile platforms, we navigate by pushing and popping screens to the "navigation stack" 
	
	Desktop:- 
		<Link href="/about" > About </Link>
		<Link href="/page2" > Page2 </Link>
		<Link href="/page3" > page3 </Link>
		
	Mobile Method1:-
		<Link push="/about" > About </Link>
		<Link replace="/page2" > Page2 </Link>
		<Link asChild="/page3" > page3 </Link>
		
	Mobile Method2:- (imperatively, meaning our explicit custom-created commands).
		import { router } from 'expo-router';
		export function logout(){
			router.replace('/login');
		}

---

Shared Layouts using _layout.tsx 
	
---

Continuous Native Generation :- it auto calculates if android or ios 

---

use detox to automated-testing .

---

npx expo export -p web  (for the web)

eas build (automated builds in the cloud).
	- submits them to google play and apple app store (without a mac machine)


---


